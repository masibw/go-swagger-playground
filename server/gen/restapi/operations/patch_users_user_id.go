// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PatchUsersUserIDHandlerFunc turns a function with the right signature into a patch users user Id handler
type PatchUsersUserIDHandlerFunc func(PatchUsersUserIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchUsersUserIDHandlerFunc) Handle(params PatchUsersUserIDParams) middleware.Responder {
	return fn(params)
}

// PatchUsersUserIDHandler interface for that can handle valid patch users user Id params
type PatchUsersUserIDHandler interface {
	Handle(PatchUsersUserIDParams) middleware.Responder
}

// NewPatchUsersUserID creates a new http.Handler for the patch users user Id operation
func NewPatchUsersUserID(ctx *middleware.Context, handler PatchUsersUserIDHandler) *PatchUsersUserID {
	return &PatchUsersUserID{Context: ctx, Handler: handler}
}

/* PatchUsersUserID swagger:route PATCH /users/{userId} patchUsersUserId

Update User Information

Update the information of an existing user.

*/
type PatchUsersUserID struct {
	Context *middleware.Context
	Handler PatchUsersUserIDHandler
}

func (o *PatchUsersUserID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchUsersUserIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchUsersUserIDBody patch users user ID body
//
// swagger:model PatchUsersUserIDBody
type PatchUsersUserIDBody struct {

	// date of birth
	DateOfBirth string `json:"dateOfBirth,omitempty"`

	// If a new email is given, the user's email verified property will be set to false.
	Email string `json:"email,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`
}

// Validate validates this patch users user ID body
func (o *PatchUsersUserIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this patch users user ID body based on context it is used
func (o *PatchUsersUserIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchUsersUserIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchUsersUserIDBody) UnmarshalBinary(b []byte) error {
	var res PatchUsersUserIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
