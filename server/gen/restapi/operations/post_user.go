// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostUserHandlerFunc turns a function with the right signature into a post user handler
type PostUserHandlerFunc func(PostUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserHandlerFunc) Handle(params PostUserParams) middleware.Responder {
	return fn(params)
}

// PostUserHandler interface for that can handle valid post user params
type PostUserHandler interface {
	Handle(PostUserParams) middleware.Responder
}

// NewPostUser creates a new http.Handler for the post user operation
func NewPostUser(ctx *middleware.Context, handler PostUserHandler) *PostUser {
	return &PostUser{Context: ctx, Handler: handler}
}

/* PostUser swagger:route POST /user postUser

Create New User

Create a new user.

*/
type PostUser struct {
	Context *middleware.Context
	Handler PostUserHandler
}

func (o *PostUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostUserBody post user body
//
// swagger:model PostUserBody
type PostUserBody struct {

	// date of birth
	// Required: true
	// Format: date
	DateOfBirth *strfmt.Date `json:"dateOfBirth"`

	// email
	// Required: true
	Email *string `json:"email"`

	// first name
	// Required: true
	FirstName *string `json:"firstName"`

	// last name
	// Required: true
	LastName *string `json:"lastName"`
}

// Validate validates this post user body
func (o *PostUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUserBody) validateDateOfBirth(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"dateOfBirth", "body", o.DateOfBirth); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"dateOfBirth", "body", "date", o.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *PostUserBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *PostUserBody) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"firstName", "body", o.FirstName); err != nil {
		return err
	}

	return nil
}

func (o *PostUserBody) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"lastName", "body", o.LastName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post user body based on context it is used
func (o *PostUserBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserBody) UnmarshalBinary(b []byte) error {
	var res PostUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
